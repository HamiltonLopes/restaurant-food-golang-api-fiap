basePath: /api/v1
definitions:
  dto.ClientInput:
    properties:
      cpf:
        type: string
      name:
        maxLength: 100
        type: string
    required:
    - cpf
    - name
    type: object
  dto.ClientOutput:
    properties:
      cpf:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.ProductInputCreate:
    properties:
      category:
        minLength: 3
        type: string
      description:
        minLength: 10
        type: string
      images:
        items:
          type: string
        type: array
      name:
        minLength: 2
        type: string
      price:
        minimum: 0
        type: number
    required:
    - category
    - description
    - images
    - name
    - price
    type: object
  dto.ProductInputUpdate:
    properties:
      category:
        minLength: 3
        type: string
      description:
        minLength: 10
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      name:
        minLength: 2
        type: string
      price:
        minimum: 0
        type: number
    required:
    - id
    type: object
  dto.ProductOutput:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
    type: object
  handler.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      details:
        example: Additional information
        type: string
      error:
        example: Invalid request
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: suporte@seu-site.com
    name: Suporte
    url: http://seu-site.com/support
  description: API do projeto FastFood Golang.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://seu-site.com/terms/
  title: FastFood Golang API
  version: "1.0"
paths:
  /admin/products:
    post:
      consumes:
      - application/json
      description: Create Product
      parameters:
      - description: Product data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ProductInputCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create Product
      tags:
      - products
  /admin/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete Product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update Product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ProductInputUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update Product
      tags:
      - products
  /clients:
    post:
      consumes:
      - application/json
      description: Cria um novo cliente com os dados fornecidos
      parameters:
      - description: Dados do Cliente
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/dto.ClientInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ClientOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Cria um novo cliente
      tags:
      - clients
  /clients/{cpf}:
    get:
      consumes:
      - application/json
      description: Retorna os dados de um cliente específico pelo CPF
      parameters:
      - description: CPF do Cliente
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ClientOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Obtém um cliente pelo CPF
      tags:
      - clients
  /products:
    get:
      consumes:
      - application/json
      description: Get Products
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get Products
      tags:
      - products
swagger: "2.0"
