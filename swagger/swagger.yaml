basePath: /api/v1
definitions:
  dto.ClientInput:
    properties:
      cpf:
        type: string
      name:
        maxLength: 100
        type: string
    required:
    - cpf
    - name
    type: object
  dto.ClientOutput:
    properties:
      cpf:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.CreateOrderItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  dto.CreateOrderRequest:
    properties:
      client_id:
        type: integer
      items:
        items:
          $ref: '#/definitions/dto.CreateOrderItemRequest'
        type: array
      payment:
        $ref: '#/definitions/dto.CreatePaymentRequest'
    type: object
  dto.CreatePaymentRequest:
    properties:
      method:
        type: string
    required:
    - method
    type: object
  dto.OrderItemResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  dto.OrderResponse:
    properties:
      client_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/dto.OrderItemResponse'
        type: array
      payment:
        $ref: '#/definitions/dto.PaymentResponse'
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.PaymentResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      id:
        type: integer
      method:
        type: string
      order_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.ProductInputCreate:
    properties:
      category:
        minLength: 3
        type: string
      description:
        minLength: 10
        type: string
      images:
        items:
          type: string
        type: array
      name:
        minLength: 2
        type: string
      price:
        minimum: 0
        type: number
    required:
    - category
    - description
    - images
    - name
    - price
    type: object
  dto.ProductInputUpdate:
    properties:
      category:
        minLength: 3
        type: string
      description:
        minLength: 10
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      name:
        minLength: 2
        type: string
      price:
        minimum: 0
        type: number
    required:
    - id
    type: object
  dto.ProductOutput:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
    type: object
  dto.UserInput:
    properties:
      age:
        maximum: 130
        minimum: 0
        type: integer
      email:
        maxLength: 100
        type: string
      name:
        maxLength: 100
        type: string
    required:
    - age
    - email
    - name
    type: object
  dto.UserOutput:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      details:
        example: Additional information
        type: string
      error:
        example: Invalid request
        type: string
    type: object
  order_list_dto.ClientDTO:
    properties:
      cpf:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  order_list_dto.OrderDTO:
    properties:
      client:
        $ref: '#/definitions/order_list_dto.ClientDTO'
      client_id:
        type: integer
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/order_list_dto.OrderItemDTO'
        type: array
      payment:
        $ref: '#/definitions/order_list_dto.PaymentDTO'
      status:
        type: string
    type: object
  order_list_dto.OrderItemDTO:
    properties:
      id:
        type: integer
      order_id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/order_list_dto.ProductDTO'
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  order_list_dto.PaginatedOrdersDTO:
    properties:
      orders:
        items:
          $ref: '#/definitions/order_list_dto.OrderDTO'
        type: array
      total:
        type: integer
    type: object
  order_list_dto.PaymentDTO:
    properties:
      amount:
        type: number
      id:
        type: integer
      method:
        type: string
      order_id:
        type: integer
      status:
        type: string
    type: object
  order_list_dto.ProductDTO:
    properties:
      category_handle:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        description: Change this according to your image structure
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8080
info:
  contact:
    email: tadeu.tupiz@gmail.com
    name: Suporte
    url: https://tadeutupinamba.com.br
  description: API do projeto FastFood Golang.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://tadeutupinamba.com.br
  title: FastFood Golang API
  version: "1.0"
paths:
  /admin/orders:
    get:
      consumes:
      - application/json
      description: Get a list of all orders with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order_list_dto.PaginatedOrdersDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Retrieve all orders
      tags:
      - orders
  /admin/products:
    post:
      consumes:
      - application/json
      description: Create Product
      parameters:
      - description: Product data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ProductInputCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create Product
      tags:
      - products
  /admin/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete Product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update Product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ProductInputUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update Product
      tags:
      - products
  /clients:
    post:
      consumes:
      - application/json
      description: Cria um novo cliente com os dados fornecidos
      parameters:
      - description: Dados do Cliente
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/dto.ClientInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ClientOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Cria um novo cliente
      tags:
      - clients
  /clients/{cpf}:
    get:
      consumes:
      - application/json
      description: Retorna os dados de um cliente específico pelo CPF
      parameters:
      - description: CPF do Cliente
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ClientOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Obtém um cliente pelo CPF
      tags:
      - clients
  /orders:
    post:
      consumes:
      - application/json
      description: Cria um novo pedido com os dados fornecidos
      parameters:
      - description: Dados do Pedido
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Cria um novo pedido
      tags:
      - orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Obtém um pedido com o ID fornecido
      parameters:
      - description: ID do Pedido
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Obtém um pedido por ID
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Get Products
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get Products
      tags:
      - products
  /users:
    get:
      consumes:
      - application/json
      description: Obtém todos os usuários cadastrados
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/dto.UserOutput'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Obtém todos os usuários
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Cria um novo usuário com os dados fornecidos
      parameters:
      - description: Dados do Usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Cria um novo usuário
      tags:
      - users
swagger: "2.0"
